[tox]
min_version = 4.0
requires =
    tox>4
env_list =
    dep
    lint
    py{36,37,38,39,310,311}-test-{lin,mac,win}
    docs
skipsdist = True
toxworkdir = {env:TOX_WORK_DIR:.tox}
skip_missing_interpreters = True

[testenv]
setenv =
    PYTHONDONTWRITEBYTECODE = 1
passenv =
    BROWSER
    DISPLAY

[testenv:lint]
description = Lint code with flake8
commands = flake8 patroni
deps = flake8

[testenv:py{36,37,38,39,310,311}-test-{lin,win,mac}]
description = Run unit tests with pytest
labels =
    test
setenv =
    mac: OPEN_CMD = {env:OPEN_CMD:open}
    lin: OPEN_CMD = {env:OPEN_CMD:xdg-open}
commands_pre =
    - {tty:rm -f "{toxworkdir}{/}cov_report_{env_name}_html{/}index.html":true}
    - {tty:rm -f "{toxworkdir}{/}pytest_report_{env_name}.html":true}
commands =
    pytest \
    -p no:cacheprovider \
    --verbose \
    --doctest-modules \
    --capture=fd \
    --cov=patroni \
    --cov-report=term-missing \
    --cov-append \
    {tty::--cov-report="xml\:{toxworkdir}{/}cov_report.{env_name}.xml"} \
    {tty:--cov-report="html\:{toxworkdir}{/}cov_report_{env_name}_html":} \
    {tty:--html="{toxworkdir}{/}pytest_report_{env_name}.html":} \
    {posargs:tests patroni}
commands_post =
    - {tty:{env:OPEN_CMD} "{toxworkdir}{/}cov_report_{env_name}_html{/}index.html":true}
    - {tty:{env:OPEN_CMD} "{toxworkdir}{/}pytest_report_{env_name}.html":true}
deps =
    -r requirements.txt
    mock>=2.0.0
    pytest
    pytest-cov
    pytest-html
    py{37,38,39,310,311}-test-{lin,win}: psycopg[binary]
    test-mac: psycopg2-binary
    py36-test: psycopg2-binary
platform =
    lin: linux
    mac: darwin
    win: win32
allowlist_externals =
    rm
    {env:OPEN_CMD}

[testenv:dep]
description = Check package dependency problems
commands = pipdeptree -w fail
deps =
    -r requirements.txt
    pipdeptree

[testenv:type]
description = Run static type checking
deps = mypy
commands = mypy {posargs:patroni}

[testenv:black]
description = Reformat code with black
deps = black
commands = black {posargs:patroni tests}

[testenv:docker-build]
description = Build docker containers needed for testing
labels =
    behave
commands =
    docker build . -t patroni -f Dockerfile
    docker build . -t patroni-dev -f features/Dockerfile
allowlist_externals = docker

[testenv:docker-cmd]
description = Run an arbitrary command in patroni-dev docker container
commands_pre =
    docker run \
        -e DCS=etcd \
        --name tox-{env_name}-{env:PYTHONHASHSEED} \
        --detach \
        --rm \
        patroni-dev
commands =
    docker exec tox-{env_name}-{env:PYTHONHASHSEED} {posargs:echo "Hello world"}
commands_post =
    docker stop tox-{env_name}-{env:PYTHONHASHSEED}
allowlist_externals = docker

;[testenv:behave-etcd-{lin,win,mac}]
[testenv:docker-behave-{etcd}]
description = Run behaviour tests in patroni-dev docker container
setenv =
    etcd: DCS=etcd
    CONTAINER_NAME = tox-{env_name}-{env:PYTHONHASHSEED}
labels =
    behave
depends =
    docker-build
commands_pre =
    docker run \
        -v {tox_root}:/src \
        -e DCS={env:DCS} \
        --name {env:CONTAINER_NAME} \
        --detach \
        --rm \
        {env:PATRONI_DEV_IMAGE:patroni-dev}
    docker exec {env:CONTAINER_NAME} rsync -a --exclude=.tox /src/ /home/postgres/src/

# There's a bug which affects calling multiple envs on the command line
# This should be a valid command: tox -e 'py{36,37,38,39,310,311}-behave-{env:DCS}-lin'
# Replaced with workaround, see https://github.com/tox-dev/tox/issues/2850
commands =
    docker exec -t -w /home/postgres/src {env:CONTAINER_NAME} \
        tox run -x 'tox.env_list=py\{36,37,38,39,310,311\}-behave-{env:DCS}-lin' \
        -- --format plain {posargs}

commands_post =
    - docker exec {env:CONTAINER_NAME} \
        cp -a /home/postgres/src/features/output /src/features/output-{env:CONTAINER_NAME}
    - docker exec {env:CONTAINER_NAME} \
        find /src/features/output-{env:CONTAINER_NAME} -type f -exec chmod 666 {} \;
    - docker exec {env:CONTAINER_NAME} \
        find /src/features/output-{env:CONTAINER_NAME} -type d -exec chmod 777 {} \;
    docker stop {env:CONTAINER_NAME}

allowlist_externals = docker
platform =
    lin: linux
;    win: win32
;    mac: darwin

[testenv:py{36,38,39,310,311}-behave-{etcd}-{lin,win,mac}]
description = Run behaviour tests (locally with tox)
deps =
    -r requirements.txt
    behave
    coverage
    py{37,38,39,310,311}-behave-{lin,win}: psycopg[binary]
    behave-mac: psycopg2-binary
    py36-behave: psycopg2-binary
setenv =
    DCS = {env:DCS:etcd}
commands =
    python3 -m behave {posargs}
platform =
    lin: linux
    mac: darwin
    win: win32

[testenv:docs-{lin,mac}]
description = Build Sphinx documentation
;basepython = python3.10
labels:
    docs
setenv =
    mac: OPEN_CMD = {env:OPEN:open}
    lin: OPEN_CMD = {env:OPEN:xdg-open}
deps =
    sphinx>=4
    sphinx_rtd_theme
commands =
    sphinx-build \
    -d "{envtmpdir}{/}doctree" docs "{toxworkdir}{/}docs_out" \
    --color -b html \
    {posargs}
commands_post =
    - {tty:{env:OPEN_CMD} "{toxworkdir}{/}docs_out{/}index.html":true:}
allowlist_externals =
    {env:OPEN_CMD}
platform =
    lin: linux
;    win: win32
    mac: darwin

[flake8]
max-line-length = 120
ignore = D401,W503
